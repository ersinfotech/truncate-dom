// provide global env

var toString = Object.prototype.toString;

Object.prototype.toString = function() {
	return this instanceof Element || this instanceof Body ? '[object HTMLTestElement]' : toString.call(this);
};

function Element (component) {
	this.component = component || 'componentX';
	this.innerHTML = '';
}

Element.prototype.getAttribute = function() {
	return this.component;
};

function Body (children) {
	this.children = children || [];
	this.innerHTML = '';
}

Body.prototype.querySelectorAll = function() {
	return this.children;
};

var element = new Element();

var body = new Body([element]);

global.window = {
	location: {
		hash: '',
	},
	addEventListener: function() {},
	removeEventListener: function() {},
};
global.document = {
	body: body,
	readyState: 'loaded',
	addEventListener: function() {},
	removeEventListener: function() {},
	querySelector: function() {},
	querySelectorAll: function() {
		return [];
	},
};


// test

var azalea = require('./');

var components = {
	componentX: function(el, render) {
		el.innerHTML = this.message;
		el.onclick = function() {
			render(function() {
				this.message = 'clicked';
			});
		};
	}
};

var routes = [
	{
		name: 'test1',
		path: '/',
		fn: [
			function() {
				this.isContext = this === context;
			}
		]
	},
];
var context = {
	message: 'empty',
};

azalea.call(context, components, routes);

var chalk = require('chalk');

var ok = true;

var error = function(err) {
	ok = false;
	console.log(chalk.bold.red(err));
};

var info = function(msg) {
	console.log(chalk.bold.green(msg));
};

if (!context.Render) error('context.Render must exist');
if (!context.Location) error('context.Location must exist');
if (!context.Element) error('context.Element must exist');
if (!context.Route) error('context.Route must exist');
if (!context.Router) error('context.Router must exist');

if (context.Location !== window.location) error('context.Location must equal to window.location');
if (context.Element !== body) error('the default value of context.Element is document.body');
if (!context.isContext) error('the this of route.fn must point to context');
if (element.innerHTML !== 'empty') error('element.innerHTML must be set as context.message before click');
element.onclick();
if (element.innerHTML !== 'clicked') error('element.innerHTML must be set as context.message after clicked');

if (ok) info('great! all passed!');