
var http = require('xhttp.js');
var road = require('road.js');
var view = require('view.js');
var river = require('river.js');

function toString (value) {
	var type = Object.prototype.toString.call(value).slice(8, -1).toLowerCase();
	return type;
}

function hash2Path (hash) {
	return hash.replace(/^(#\/|#)?/, '/');
}

function _azalea (context, routes, components, attribute, callback) {
	
	var router = road(routes);

	var _render = view.call(context, null, components, attribute);

	var init = function() {
		var contextElementHTML = context.Element.innerHTML;
		context.Element.innerHTML = '';
		_render.append(document, true);

		context.Element.innerHTML = contextElementHTML;
		_render.append(context.Element, false);
		contextElementHTML = null;

		init = undefined;
	};

	var render = function() {
		_render.remove(false);
		_render.append(context.Element, false);
		_render();
	};
	
	function app (req, res) {
		var path = hash2Path(req.hash);
		var route = router(path);

		var flow = river([init, (route && route.fn), render]);

		context.Render = _render;
		context.Location = req;
		context.Element = res;
		context.Route = route;
		context.Router = router;

		flow.call(context, callback);
	}

	var server = http.createServer(app).listen();

	azalea.onunload = function() {
		_render.remove(true);
		server.onunload();
		azalea.onunload = null;
	};

}

function azalea () {
	if (typeof azalea.onunload === 'function') azalea.onunload();

	var context = this || {}, routes = [], components = {}, attribute = 'component', callback = function() {};

	for (var i = arguments.length - 1; i >= 0; i--) {
		var arg = arguments[i];
		switch (toString(arg)) {
			case 'function':
				callback = arg;
				break;
			case 'array': 
				routes = arg;
				break;
			case 'object':
				components = arg;
				break;
			case 'string':
				attribute = arg;
				break;
		}
		
	};

	_azalea(context, routes, components, attribute, callback);

}

azalea.onunload = null;

module.exports = azalea;